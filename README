KayFish is a new PHP / mysql framework

Before you do anything, rename htaccess.txt to .htaccess

This framework includes a user system already built in, you just upload the sql.sql file to your database and set up the settings in your config file.

-	Folder Structure:
	-	_lib/
		-	home of functional php files, try not to edit
	-	assets/
		-	where we place folders such as css, js and images
	-	sections/
		-	here we build the core of the site.
Setup:
------

-	Under sections:
	-	create folders for each section your site will have, ideally, non-logged in pages go under visitor, but you can make whatever you want.
-	Open config.php
	-	Edit the rest of config.php to have your info.
-	Upload files
-	Load sql.sql into your database, you can build on this DB, but it contains your user and options setup.
-	Happy developing.

Helper functions:
-----------------
-	set_option($key,$val)
-	get_option($key = '')
-	set_usermeta($uid,$key,$val)
-	get_usermeta($uid,$key = '')
-	passhash($str)
-	login($username,$password)
-	admin_login($username,$password)
-	currentuser()
-	is_logged_in()
-	is_admin()

Post Functions:
---------------
-	insert_post($arr)
-	update_post($id,$arr)
-	query_posts($arr)
-	update_post_meta($post_id,$key,$val) {
-	set_postmeta($post_id,$key,$val)
-	get_postmeta($post_id,$key = '')
-	insert_term($name,$slug='',$term_group=0)
-	update_term($id,$name,$slug='',$term_group=0)
-	insert_taxonomy($term_id,$taxonomy,$description,$parent,$count)
-	update_taxonomy($id,$term_id,$taxonomy,$description,$parent,$count)
-	insert_relationship($term_id,$object_id)


Queries:
--------
-	kfdb object
	-	flush()
	-	lastid()
	-	delete($table, $where, $limit = 1)
		-	returns number of affected rows
	-	insert($table, $data)
		-	returns number of affected rows
	-	update($table, $data, $where, $limit = 1) 
		-	returns number of affected rows
	-	query($query)
	-	get_var($query=null,$x=0,$y=0)
	-	get_row($query=null,$output=OBJECT,$y=0)
	-	get_results($query=null, $output = OBJECT)
	-	get_col( $query )
	-	_weak_escape( $string )
	-	_real_escape( $string )
	-	_escape( $data )
	-	escape( $data )
	-	escape_by_ref( &$string )
	-	escape_deep( $array )
	-	tables( $scope )
		-	returns an array list of default tables in db
-	mysql_get_var($query,$x=0,$y=0)
	-	returns a single variable
-	mysql_get_results($query)
	-	returns an array of results
-	mysql_get_no_results($query)
	-	calls a query and doesn't return results
-	escape($str = '')
	-	escapes a string
-	cleanLike($q)
	-	cleans a query for.
-	dbDelta( $queries, $execute = true )
	-	Given an array of queries, performs checks to see if current DB matches what is specified and performs updates if needed
	
Logging:
---------

$array = array(
	"data"=>1,
	"nested"=>array("name"=>"hello","item"=>"world"),
	"nested2"=>array("name"=>"hello","item"=>"world"),
	"nested3"=>array("name"=>"hello","item"=>"world"),
	"nested4"=>array("name"=>"hello","item"=>"world"),
);

$xmlLogger = new xmlLogger();
$xmlLogger->logXML('arrayTestxml',$array, "root", "branch"); 
echo $xmlLogger->getXML('arrayTestxml');

	
Caching:
-------
$cachetime = (60*60*24);			// 24 hours
$sql = "SELECT * FROM users";
$oCache = new Cache( $sql, $cachetime );
if ( $oCache->Check() ) {
	$data = $oCache->Get();
}else{
	$data = array();
	$res = mysql_query($sql,DBH);
	while($row = mysql_fetch_assoc($res)){
		$data[] = $row;
	}
	$oCache->Set($data);
}

NOTE: This example uses a query, you can use it for whatever type of data you want to cache.